{"version":3,"sources":["components/TodoApp.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","todos.js","App.js","index.js"],"names":["TodoApp","state","title","handleInputChange","event","setState","target","value","handleReset","handleSubmit","preventDefault","props","addNewTodo","todos","trim","id","length","completed","this","className","onSubmit","placeholder","onChange","React","Component","TodoItem","targetTitle","handleChangeTargetTitle","toggleComplete","removeTodo","cn","type","checked","htmlFor","onClick","handleChange","TodoList","selectAll","toggleSelectAll","map","todo","index","key","TodosFilters","activeTodoCounter","href","filters","App","currentFilter","prevState","filter","task","handleFilterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a738f13e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoApp extends React.Component {\n  state ={\n    title: '',\n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  handleReset = () => {\n    this.setState({\n      title: '',\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { addNewTodo, todos } = this.props;\n    const { title } = this.state;\n\n    if (!title.trim()) {\n      this.setState({\n        title: '',\n      });\n\n      return;\n    }\n\n    const newTodo = {\n      title,\n      id: todos.length + 1,\n      completed: false,\n    };\n\n    addNewTodo(newTodo);\n\n    this.handleReset();\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={this.handleInputChange}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  // id: PropTypes.number.isRequired,\n  addNewTodo: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends React.Component {\n  state= {\n    targetTitle: this.props.title,\n  }\n\n  handleChangeTargetTitle = (event) => {\n    this.setState({\n      targetTitle: event.target.value,\n    });\n  }\n\n  render() {\n    const { title, id, completed, toggleComplete, removeTodo } = this.props;\n    const { targetTitle } = this.state;\n\n    return (\n      <li className={cn({ completed })}>\n        <form>\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={`todo-${id}`}\n              checked={completed}\n              onChange={() => toggleComplete(id)}\n            />\n            <label\n              htmlFor={id}\n            >\n              {title}\n              {id}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => removeTodo(id)}\n            />\n          </div>\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={targetTitle}\n            handleChange={this.handleChangeTargetTitle}\n          />\n        </form>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  todos,\n  selectAll,\n  toggleComplete,\n  removeTodo,\n  toggleSelectAll,\n}) => (\n\n  <section className=\"main\">\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={selectAll}\n      onChange={() => toggleSelectAll(selectAll)}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n    <ul className=\"todo-list\">\n      {todos.map((todo, index) => (\n        <TodoItem\n          key={todo.id}\n          {...todo}\n          toggleComplete={toggleComplete}\n          removeTodo={removeTodo}\n        />\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  selectAll: PropTypes.bool.isRequired,\n  toggleSelectAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import todos from '../todos';\n\nexport class TodosFilters extends React.Component {\n  state ={\n    // todos,\n    // currentFilter,\n  }\n\n  render() {\n    const { activeTodoCounter } = this.props;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${activeTodoCounter()} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a href=\"#/\" className=\"selected\">All</a>\n          </li>\n\n          <li>\n            <a href=\"#/active\">Active</a>\n          </li>\n\n          <li>\n            <a href=\"#/completed\">Completed</a>\n          </li>\n        </ul>\n\n        <button type=\"button\" className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nTodosFilters.propTypes = {\n  activeTodoCounter: PropTypes.func.isRequired,\n};\n","const todos = [\n  {\n    title: 'task my task',\n    id: 1,\n    completed: false,\n  },\n  {\n    title: 'what do you need',\n    id: 2,\n    completed: false,\n  },\n  {\n    title: 'for world peace',\n    id: 3,\n    completed: true,\n  },\n];\n\nexport default todos;\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilters } from './components/TodosFilter';\nimport todos from './todos';\n\nconst filters = {\n  all: 'all',\n  completed: 'completed',\n  active: 'active',\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [...todos],\n    selectAll: false,\n    currentFilter: filters.all,\n  }\n\n  // handleFilterTodos = () => {\n  //   const { todos, currentFilter } = this.state;\n\n  //   if (currentFilter === filters.complited) {\n  //     return todos.filter(todo => todo.complited);\n  //   }\n\n  //   if (currentFilter === filters.active) {\n  //     return todos.filter(todo => !todo.complited);\n  //   }\n\n  //   return todos;\n  // }\n\n  addNewTodo = (todo) => {\n    this.setState(state => ({\n      todos: [...state.todos, todo],\n    }));\n  };\n\n  toggleComplete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].filter(todo => id !== todo.id),\n    }));\n  }\n\n  toggleSelectAll = (selectAll) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: !selectAll,\n      })),\n      selectAll: !selectAll,\n    }));\n  }\n\n  activeTodoCounter = () => this.state.todos\n    .filter(task => !task.completed).length\n\n  // getFilteredTodos = () => {\n  //   const { todoList, activeFilter } = this.state;\n\n  //   if (activeFilter === FILTER_TYPES.completed) {\n  //     return todoList.filter(todo => todo.completed);\n  //   }\n\n  //   if (activeFilter === FILTER_TYPES.active) {\n  //     return todoList.filter(todo => !todo.completed);\n  //   }\n\n  //   return todoList;\n  // }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <TodoApp\n          addNewTodo={this.addNewTodo}\n          todos={this.state.todos}\n        />\n        <TodoList\n          todos={this.handleFilterTodos()}\n          // todos={this.state.todos}\n          selectAll={this.state.selectAll}\n          toggleComplete={this.toggleComplete}\n          removeTodo={this.removeTodo}\n          toggleSelectAll={this.toggleSelectAll}\n        />\n        <TodosFilters\n          todos={this.state.todos}\n          currentFilter={this.state.currentFilter}\n          activeTodoCounter={this.activeTodoCounter}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}