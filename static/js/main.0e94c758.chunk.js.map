{"version":3,"sources":["components/TodoApp.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoApp","state","title","handleInputChange","event","setState","target","value","handleReset","handleSubmit","preventDefault","addNewTodo","props","trim","id","Date","completed","this","className","onSubmit","placeholder","onChange","React","Component","TodoItem","isEdit","currentTitle","startEditing","handleCurrentTitleEdit","key","type","editTitleTodo","toggleComplete","removeTodo","cn","editing","checked","htmlFor","onDoubleClick","onClick","defaultValue","ref","textInput","onBlur","onKeyDown","autoFocus","TodoList","todos","toggleSelectAll","length","every","todo","map","TodosFilters","buttonsFilter","href","text","activeTodoCounter","currentFilter","filterSelector","removeCompleted","button","selected","filterType","all","active","App","selectAll","prevState","filter","task","filterByStatus","filteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e94c758.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoApp extends React.Component {\n  state ={\n    title: '',\n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  handleReset = () => {\n    this.setState({\n      title: '',\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { addNewTodo } = this.props;\n    const { title } = this.state;\n\n    if (!title.trim()) {\n      this.setState({\n        title: '',\n      });\n\n      return;\n    }\n\n    const newTodo = {\n      title,\n      id: +new Date(),\n      completed: false,\n    };\n\n    addNewTodo(newTodo);\n\n    this.handleReset();\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={this.handleInputChange}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends React.Component {\n  state = {\n    isEdit: false,\n    currentTitle: this.props.title,\n  }\n\n  startEditing = () => {\n    this.setState({\n      isEdit: true,\n      currentTitle: this.props.title,\n    });\n  }\n\n  handleCurrentTitleEdit = (event, id) => {\n    if (event.key === 'Escape') {\n      this.setState({\n        isEdit: false,\n        currentTitle: this.props.title,\n      });\n    }\n\n    if (event.key !== 'Enter' && event.type !== 'blur') {\n      return;\n    }\n\n    this.setState({\n      isEdit: false,\n    });\n    this.props.editTitleTodo(event.target.value, id);\n  }\n\n  render() {\n    const { title, id, completed, toggleComplete, removeTodo } = this.props;\n    const { isEdit, currentTitle } = this.state;\n\n    return (\n      <li\n        className={cn({ completed }, { editing: isEdit })}\n      >\n        <form>\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={`todo-${id}`}\n              checked={completed}\n              onChange={() => toggleComplete(id)}\n            />\n            <label\n              htmlFor={id}\n              onDoubleClick={this.startEditing}\n            >\n              {title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => removeTodo(id)}\n            />\n          </div>\n          {isEdit && (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              defaultValue={currentTitle}\n              ref={this.textInput}\n              onBlur={event => this.handleCurrentTitleEdit(event, id)}\n              onKeyDown={event => this.handleCurrentTitleEdit(event, id)}\n              /* eslint-disable jsx-a11y/no-autofocus */\n              autoFocus\n            />\n          )}\n        </form>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  editTitleTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  todos,\n  toggleComplete,\n  removeTodo,\n  toggleSelectAll,\n  editTitleTodo,\n}) => (\n\n  <section className=\"main\">\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={todos.length > 0 && todos.every(todo => todo.completed)}\n      onChange={toggleSelectAll}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          {...todo}\n          toggleComplete={toggleComplete}\n          removeTodo={removeTodo}\n          editTitleTodo={editTitleTodo}\n        />\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  selectAll: PropTypes.bool.isRequired,\n  toggleSelectAll: PropTypes.func.isRequired,\n  editTitleTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport class TodosFilters extends React.Component {\n  buttonsFilter = [\n    {\n      href: '#/',\n      text: 'All',\n    },\n    {\n      href: '#/active',\n      text: 'Active',\n    },\n    {\n      href: '#/completed',\n      text: 'Completed',\n    },\n  ];\n\n  render() {\n    const\n      { activeTodoCounter,\n        currentFilter,\n        filterSelector,\n        removeCompleted }\n      = this.props;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${activeTodoCounter()} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          {this.buttonsFilter.map(button => (\n            <li key={button.text}>\n              <a\n                href={button.href}\n                className={cn({ selected: currentFilter === `${button.text}` })}\n                onClick={({ target }) => filterSelector(target.text)}\n              >\n                {button.text}\n              </a>\n            </li>\n          ))}\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={removeCompleted}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nTodosFilters.propTypes = {\n  activeTodoCounter: PropTypes.func.isRequired,\n  currentFilter: PropTypes.number.isRequired,\n  filterSelector: PropTypes.func.isRequired,\n  removeCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilters } from './components/TodosFilter';\n\nconst filterType = {\n  all: 'All',\n  completed: 'Completed',\n  active: 'Active',\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectAll: false,\n    currentFilter: filterType.all,\n  }\n\n  addNewTodo = (todo) => {\n    this.setState(state => ({\n      todos: [...state.todos, todo],\n    }));\n  };\n\n  toggleComplete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].filter(todo => id !== todo.id),\n    }));\n  }\n\n  toggleSelectAll = ({ target }) => {\n    this.setState(({ todos, selectAll }) => {\n      const allDone = todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      }));\n\n      return {\n        todos: allDone,\n        selectAll: !selectAll,\n      };\n    });\n  }\n\n  activeTodoCounter = () => this.state.todos\n    .filter(task => !task.completed).length\n\n  filterSelector = (currentFilter) => {\n    this.setState({ currentFilter });\n  }\n\n  filterByStatus = () => {\n    if (this.state.currentFilter === filterType.active) {\n      return this.state.todos.filter(todo => !todo.completed);\n    }\n\n    if (this.state.currentFilter === filterType.completed) {\n      return this.state.todos.filter(todo => todo.completed);\n    }\n\n    return this.state.todos;\n  }\n\n  removeCompleted = () => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].filter(todo => !todo.completed),\n    }));\n  }\n\n  editTitleTodo = (title, id) => {\n    if (!title.trim()) {\n      return;\n    }\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  render() {\n    const filteredTodos = this.filterByStatus();\n\n    return (\n      <section className=\"todoapp\">\n        <TodoApp\n          todos={this.state.todos}\n          addNewTodo={this.addNewTodo}\n        />\n        <TodoList\n          todos={filteredTodos}\n          toggleComplete={this.toggleComplete}\n          toggleSelectAll={this.toggleSelectAll}\n          editTitleTodo={this.editTitleTodo}\n          removeTodo={this.removeTodo}\n        />\n        {this.state.todos.length > 0 && (\n          <TodosFilters\n            filterType={filterType}\n            todos={this.state.todos}\n            currentFilter={this.state.currentFilter}\n            activeTodoCounter={this.activeTodoCounter}\n            filterSelector={this.filterSelector}\n            removeCompleted={this.removeCompleted}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}