{"version":3,"sources":["components/TodoApp.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoApp","state","title","handleInputChange","event","setState","target","value","handleReset","handleSubmit","preventDefault","addNewTodo","props","trim","id","Date","completed","this","className","onSubmit","placeholder","onChange","React","Component","TodoItem","toggleComplete","removeTodo","cn","type","checked","htmlFor","onDoubleClick","handleStartEdit","onClick","defaultValue","TodoList","todos","selectAll","toggleSelectAll","map","todo","key","TodosFilters","buttonsFilter","href","text","activeTodoCounter","currentFilter","filterSelector","removeCompleted","button","selected","filterType","all","active","App","prevState","filter","task","length","filterByStatus","filteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e56e9600.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoApp extends React.Component {\n  state ={\n    title: '',\n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  handleReset = () => {\n    this.setState({\n      title: '',\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { addNewTodo } = this.props;\n    const { title } = this.state;\n\n    if (!title.trim()) {\n      this.setState({\n        title: '',\n      });\n\n      return;\n    }\n\n    const newTodo = {\n      title,\n      id: +new Date(),\n      completed: false,\n    };\n\n    addNewTodo(newTodo);\n\n    this.handleReset();\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={this.handleInputChange}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends React.Component {\n  // state= {\n  //   targetTitle: this.props.title,\n  // }\n\n  // handleChangeTargetTitle = (event) => {\n  //   this.setState({\n  //     targetTitle: event.target.value,\n  //   });\n  // }\n\n  render() {\n    const { title, id, completed, toggleComplete, removeTodo } = this.props;\n    // const { targetTitle } = this.state;\n\n    return (\n      <li className={cn({ completed })}>\n        <form>\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={`todo-${id}`}\n              checked={completed}\n              onChange={() => toggleComplete(id)}\n            />\n            <label\n              htmlFor={id}\n              onDoubleClick={this.handleStartEdit}\n            >\n              {title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => removeTodo(id)}\n            />\n          </div>\n          <input\n            type=\"text\"\n            className=\"edit\"\n            defaultValue={title}\n          />\n        </form>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  todos,\n  selectAll,\n  toggleComplete,\n  removeTodo,\n  toggleSelectAll,\n  // completedStatus,\n}) => (\n\n  <section className=\"main\">\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      // checked={completedStatus}\n      checked={selectAll}\n      onChange={() => toggleSelectAll(selectAll)}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          {...todo}\n          toggleComplete={toggleComplete}\n          removeTodo={removeTodo}\n          // editTodo={editTodo}\n        />\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  selectAll: PropTypes.bool.isRequired,\n  toggleSelectAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport class TodosFilters extends React.Component {\n  buttonsFilter = [\n    {\n      href: '#/',\n      text: 'All',\n    },\n    {\n      href: '#/active',\n      text: 'Active',\n    },\n    {\n      href: '#/completed',\n      text: 'Completed',\n    },\n  ];\n\n  render() {\n    const\n      { activeTodoCounter,\n        currentFilter,\n        filterSelector,\n        removeCompleted }\n      = this.props;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${activeTodoCounter()} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          {this.buttonsFilter.map(button => (\n            <li key={button.text}>\n              <a\n                href={button.href}\n                className={cn({ selected: currentFilter === `${button.text}` })}\n                onClick={({ target }) => filterSelector(target.text)}\n              >\n                {button.text}\n              </a>\n            </li>\n          ))}\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={removeCompleted}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nTodosFilters.propTypes = {\n  activeTodoCounter: PropTypes.func.isRequired,\n  currentFilter: PropTypes.number.isRequired,\n  filterSelector: PropTypes.func.isRequired,\n  removeCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilters } from './components/TodosFilter';\n\nconst filterType = {\n  all: 'All',\n  completed: 'Completed',\n  active: 'Active',\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectAll: false,\n    currentFilter: filterType.all,\n  }\n\n  addNewTodo = (todo) => {\n    this.setState(state => ({\n      todos: [...state.todos, todo],\n    }));\n  };\n\n  toggleComplete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].filter(todo => id !== todo.id),\n    }));\n  }\n\n  toggleSelectAll = (selectAll) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: !selectAll,\n      })),\n      selectAll: !selectAll,\n    }));\n  }\n\n  activeTodoCounter = () => this.state.todos\n    .filter(task => !task.completed).length\n\n  filterSelector = (currentFilter) => {\n    this.setState({ currentFilter });\n  }\n\n  filterByStatus = () => {\n    if (this.state.currentFilter === filterType.active) {\n      return this.state.todos.filter(todo => !todo.completed);\n    }\n\n    if (this.state.currentFilter === filterType.completed) {\n      return this.state.todos.filter(todo => todo.completed);\n    }\n\n    return this.state.todos;\n  }\n\n  removeCompleted = () => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const filteredTodos = this.filterByStatus();\n\n    // const completedStatus = this.state.todos.length === 0\n    //   ? false\n    //   : this.state.todos.every(todo => todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <TodoApp\n          addNewTodo={this.addNewTodo}\n          todos={this.state.todos}\n        />\n        <TodoList\n          todos={filteredTodos}\n          // completedStatus={completedStatus}\n          selectAll={this.state.selectAll}\n          toggleComplete={this.toggleComplete}\n          removeTodo={this.removeTodo}\n          toggleSelectAll={this.toggleSelectAll}\n        />\n        {this.state.todos.length > 0 && (\n          <TodosFilters\n            filterType={filterType}\n            todos={this.state.todos}\n            currentFilter={this.state.currentFilter}\n            activeTodoCounter={this.activeTodoCounter}\n            filterSelector={this.filterSelector}\n            removeCompleted={this.removeCompleted}\n          />\n        )}\n\n        {/* <TodosFilters\n          filterType={filterType}\n          todos={this.state.todos}\n          currentFilter={this.state.currentFilter}\n          activeTodoCounter={this.activeTodoCounter}\n          filterSelector={this.filterSelector}\n          removeCompleted={this.removeCompleted}\n        /> */}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}